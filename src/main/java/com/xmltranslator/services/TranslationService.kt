package com.xmltranslator.services

import com.intellij.openapi.components.Service
import com.intellij.openapi.project.Project
import java.io.File

// Type aliases ƒë·ªÉ maintain compatibility - moved outside class
typealias TranslationRequest = ApiService.TranslationRequest
typealias StringItem = ApiService.StringItem
typealias TranslationResponse = ApiService.TranslationResponse
typealias TranslatedItem = ApiService.TranslatedItem

/**
 * Main translation service orchestrator - refactored ƒë·ªÉ t√°ch responsibilities
 * S·ª≠ d·ª•ng c√°c services kh√°c cho specific tasks v√† s·ª≠a l·ªói error handling
 * 
 * @author Thanh Nguyen <thanhnguyen6702@gmail.com>
 */
@Service(Service.Level.PROJECT)
class TranslationService(private val project: Project) {
    
    private val apiService by lazy { project.getService(ApiService::class.java) }
    private val xmlProcessor by lazy { project.getService(XmlProcessor::class.java) }
    private val stringFilter by lazy { project.getService(StringFilter::class.java) }
    private val projectScanner by lazy { project.getService(ProjectScanner::class.java) }
    
    /**
     * Delegate to StringFilter service
     */
    fun getFilteredValuesFolders(resourceDir: File): List<String> {
        return stringFilter.getFilteredValuesFolders(resourceDir)
    }
    
    /**
     * Delegate to StringFilter service
     */
    fun getFilteringInfo(): String {
        return stringFilter.getFilteringInfo()
    }
    
    /**
     * Delegate to StringFilter service
     */
    fun testExclusion(name: String, isFolder: Boolean = false): Pair<Boolean, String> {
        return stringFilter.testExclusion(name, isFolder)
    }
    
    /**
     * Get timeout information for a given number of strings
     */
    fun getTimeoutInfo(stringCount: Int): String {
        return apiService.getTimeoutInfo(stringCount)
    }
    
    /**
     * Scan project v√† tr·∫£ v·ªÅ danh s√°ch modules c√≥ th·ªÉ d·ªãch
     */
    fun getAvailableModules(): List<ProjectScanner.AndroidModule> {
        return projectScanner.scanProjectModules(project)
    }
    
    /**
     * Get project info for debugging
     */
    fun getProjectInfo(): String {
        return projectScanner.getProjectInfo(project)
    }
    
    /**
     * Get filtered values folders for a specific module
     */
    fun getFilteredValuesFolders(module: ProjectScanner.AndroidModule): List<String> {
        return projectScanner.getFilteredValuesFolders(module)
    }

    /**
     * Translate m·ªôt text ƒë∆°n l·∫ª - THROW exception khi l·ªói (kh√¥ng fallback)
     */
    fun translateText(text: String, sourceLang: String, targetLang: String): String {
        println("DEBUG: D·ªãch '$text' t·ª´ $sourceLang sang $targetLang")
        
        val request = TranslationRequest(
            source_language = sourceLang,
            target_language = targetLang,
            strings = listOf(StringItem(1, text))
        )
        
        val response = apiService.translateRequest(request)
        return response.translations.firstOrNull()?.text 
            ?: throw Exception("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ translation cho text: $text")
    }
    
    /**
     * Translate danh s√°ch strings - THROW exception khi l·ªói (kh√¥ng fallback)
     */
    fun translateStrings(
        strings: List<Pair<String, String>>, // name to text pairs
        sourceLang: String,
        targetLang: String,
        onProgress: (String) -> Unit = {}
    ): List<Pair<String, String>> {
        onProgress("Chu·∫©n b·ªã y√™u c·∫ßu translation...")
        
        val request = TranslationRequest(
            source_language = sourceLang,
            target_language = targetLang,
            strings = strings.mapIndexed { index, (name, text) ->
                StringItem(index + 1, text, name)
            }
        )
        
        onProgress("G·ª≠i y√™u c·∫ßu t·ªõi translation API...")
        val response = apiService.translateRequest(request)
        
        onProgress("X·ª≠ l√Ω k·∫øt qu·∫£ translation...")
        return strings.zip(response.translations).map { (original, translated) ->
            original.first to translated.text
        }
    }

    
    fun translateXmlFile(
        inputFile: File,
        outputDir: File,
        targetLanguages: List<String>,
        onProgress: (String) -> Unit = {}
    ) {
        onProgress("ƒê·ªçc file XML...")
        
        val xmlContent = inputFile.readText()
        val document = xmlProcessor.parseXml(xmlContent)
        val stringElements = xmlProcessor.extractStringElements(document)
        
        if (stringElements.isEmpty()) {
            onProgress("Kh√¥ng t√¨m th·∫•y strings c√≥ th·ªÉ d·ªãch trong file XML")
            return
        }
        
        onProgress("T√¨m th·∫•y ${stringElements.size} strings ƒë·ªÉ d·ªãch")
        
        for (lang in targetLanguages) {
            onProgress("ƒêang d·ªãch sang $lang...")
            
            // KH√îNG catch exception - ƒë·ªÉ l·ªói bubble up v√† ngƒÉn vi·ªác ghi file
            val translations = translateStrings(
                stringElements,
                "en",
                lang
            ) { progress ->
                onProgress("$lang: $progress")
            }
            
            val outputFile = File(outputDir, "values-$lang/strings.xml")
            outputFile.parentFile.mkdirs()
            
            xmlProcessor.saveTranslatedXml(translations, outputFile)
            onProgress("ƒê√£ l∆∞u translations cho $lang")
            
            // Wait between translations to avoid API limits
            Thread.sleep(2000)
        }
        
        onProgress("D·ªãch ho√†n t·∫•t!")
    }
    
    /**
     * Translate strings.xml trong m·ªôt module c·ª• th·ªÉ
     */
    fun translateModule(
        module: ProjectScanner.AndroidModule,
        targetLanguages: List<String>,
        onProgress: (String) -> Unit = {}
    ) {
        if (!module.hasStringsFile) {
            throw Exception("Module ${module.name} kh√¥ng c√≥ file strings.xml")
        }
        
        onProgress("üì¶ ƒêang d·ªãch module: ${module.name}")
        onProgress("üìÑ Input: ${module.stringsFile!!.path}")
        
        val xmlContent = module.stringsFile.readText()
        val document = xmlProcessor.parseXml(xmlContent)
        val stringElements = xmlProcessor.extractStringElements(document)
        
        if (stringElements.isEmpty()) {
            onProgress("‚ùå Kh√¥ng t√¨m th·∫•y strings c√≥ th·ªÉ d·ªãch trong ${module.name}")
            return
        }
        
        onProgress("‚úÖ T√¨m th·∫•y ${stringElements.size} strings ƒë·ªÉ d·ªãch")
        
        for (lang in targetLanguages) {
            onProgress("üåç ƒêang d·ªãch sang $lang...")
            
            // KH√îNG catch exception - ƒë·ªÉ l·ªói bubble up v√† ngƒÉn vi·ªác ghi file
            val translations = translateStrings(
                stringElements,
                "en",
                lang
            ) { progress ->
                onProgress("   $lang: $progress")
            }
            
            val outputFile = File(module.resDir, "values-$lang/strings.xml")
            outputFile.parentFile.mkdirs()
            
            xmlProcessor.saveTranslatedXml(translations, outputFile)
            onProgress("‚úÖ ƒê√£ l∆∞u translations cho $lang t·∫°i ${outputFile.path}")
            
            // Wait between translations to avoid API limits
            Thread.sleep(2000)
        }
        
        onProgress("üéâ D·ªãch module ${module.name} ho√†n t·∫•t!")
    }
    

    

    
    fun addStringToXmlFiles(
        stringName: String,
        originalText: String,
        resourceDir: File,
        targetFolders: Array<String>,
        onProgress: (String) -> Unit = {}
    ) {
        for (folder in targetFolders) {
            val translatedText = if (folder == "values") {
                originalText
            } else {
                val lang = folder.removePrefix("values-")
                onProgress("ƒêang d·ªãch sang $lang...")
                // KH√îNG catch exception - ƒë·ªÉ l·ªói bubble up
                translateText(originalText, "en", lang)
            }
            
            val xmlFile = File(resourceDir, "$folder/strings.xml")
            xmlFile.parentFile.mkdirs()
            
            xmlProcessor.addOrUpdateStringInXml(xmlFile, stringName, translatedText)
            onProgress("ƒê√£ th√™m string v√†o $folder")
        }
        
        onProgress("ƒê√£ th√™m string v√†o t·∫•t c·∫£ folders ƒë∆∞·ª£c ch·ªçn!")
    }
    
    /**
     * Add strings v√†o m·ªôt module c·ª• th·ªÉ
     */
    fun addStringToModule(
        stringName: String,
        originalText: String,
        module: ProjectScanner.AndroidModule,
        targetFolders: Array<String>,
        onProgress: (String) -> Unit = {}
    ) {
        onProgress("üì¶ ƒêang th√™m string v√†o module: ${module.name}")
        
        for (folder in targetFolders) {
            val translatedText = if (folder == "values") {
                originalText
            } else {
                val lang = folder.removePrefix("values-")
                onProgress("üåç ƒêang d·ªãch sang $lang...")
                // KH√îNG catch exception - ƒë·ªÉ l·ªói bubble up
                translateText(originalText, "en", lang)
            }
            
            val xmlFile = File(module.resDir, "$folder/strings.xml")
            xmlFile.parentFile.mkdirs()
            
            xmlProcessor.addOrUpdateStringInXml(xmlFile, stringName, translatedText)
            onProgress("‚úÖ ƒê√£ th√™m string v√†o $folder")
        }
        
        onProgress("üéâ ƒê√£ th√™m string v√†o t·∫•t c·∫£ folders ƒë∆∞·ª£c ch·ªçn trong module ${module.name}!")
    }
    
    fun addBatchStringsToXmlFiles(
        stringItems: List<Pair<String, String>>, // (name, text) pairs
        resourceDir: File,
        targetFolders: Array<String>,
        onProgress: (String) -> Unit = {},
        batchSize: Int = 50
    ) {
        val totalStrings = stringItems.size
        onProgress("B·∫Øt ƒë·∫ßu batch translation cho $totalStrings strings...")
        
        // Group strings into batches
        val batches = stringItems.chunked(batchSize)
        onProgress("Chia th√†nh ${batches.size} batches v·ªõi t·ªëi ƒëa $batchSize strings m·ªói batch")
        
        for (folder in targetFolders) {
            val lang = folder.removePrefix("values-")
            onProgress("X·ª≠ l√Ω folder: $folder")
            
            if (folder == "values") {
                // Original language - kh√¥ng c·∫ßn d·ªãch
                for ((stringName, originalText) in stringItems) {
                    val xmlFile = File(resourceDir, "$folder/strings.xml")
                    xmlFile.parentFile.mkdirs()
                    xmlProcessor.addOrUpdateStringInXml(xmlFile, stringName, originalText)
                }
                onProgress("ƒê√£ th√™m $totalStrings strings v√†o $folder (original)")
            } else {
                // Target language - c·∫ßn d·ªãch
                var processedInLang = 0
                for ((batchIndex, batch) in batches.withIndex()) {
                    onProgress("D·ªãch batch ${batchIndex + 1}/${batches.size} sang $lang (${batch.size} strings)...")
                    
                    // Translate entire batch at once - KH√îNG catch exception
                    val translatedBatch = translateStrings(
                        batch,
                        "en",
                        lang
                    ) { progress ->
                        onProgress("$lang batch ${batchIndex + 1}: $progress")
                    }
                    
                    // Add translated strings to XML
                    for ((originalPair, translatedPair) in batch.zip(translatedBatch)) {
                        val stringName = originalPair.first
                        val translatedText = translatedPair.second
                        
                        val xmlFile = File(resourceDir, "$folder/strings.xml")
                        xmlFile.parentFile.mkdirs()
                        xmlProcessor.addOrUpdateStringInXml(xmlFile, stringName, translatedText)
                        processedInLang++
                    }
                    
                    onProgress("ƒê√£ th√™m batch ${batchIndex + 1} v√†o $folder ($processedInLang/$totalStrings strings)")
                    
                    // Add delay between batches to respect API limits
                    if (batchIndex < batches.size - 1) {
                        Thread.sleep(2000)
                    }
                }
                onProgress("Ho√†n th√†nh t·∫•t c·∫£ batches cho $folder ($processedInLang strings)")
            }
            
            // Add delay between languages
            Thread.sleep(1000)
        }
        
        onProgress("T·∫•t c·∫£ $totalStrings strings ƒë√£ ƒë∆∞·ª£c th√™m v√†o t·∫•t c·∫£ folders ƒë∆∞·ª£c ch·ªçn!")
    }
    
    /**
     * Add batch strings v√†o m·ªôt module c·ª• th·ªÉ
     */
    fun addBatchStringsToModule(
        stringItems: List<Pair<String, String>>, // (name, text) pairs
        module: ProjectScanner.AndroidModule,
        targetFolders: Array<String>,
        onProgress: (String) -> Unit = {},
        batchSize: Int = 50
    ) {
        val totalStrings = stringItems.size
        onProgress("üì¶ B·∫Øt ƒë·∫ßu batch translation cho $totalStrings strings trong module ${module.name}...")
        
        // Group strings into batches
        val batches = stringItems.chunked(batchSize)
        onProgress("üìä Chia th√†nh ${batches.size} batches v·ªõi t·ªëi ƒëa $batchSize strings m·ªói batch")
        
        for (folder in targetFolders) {
            val lang = folder.removePrefix("values-")
            onProgress("üìÇ X·ª≠ l√Ω folder: $folder")
            
            if (folder == "values") {
                // Original language - kh√¥ng c·∫ßn d·ªãch
                for ((stringName, originalText) in stringItems) {
                    val xmlFile = File(module.resDir, "$folder/strings.xml")
                    xmlFile.parentFile.mkdirs()
                    xmlProcessor.addOrUpdateStringInXml(xmlFile, stringName, originalText)
                }
                onProgress("‚úÖ ƒê√£ th√™m $totalStrings strings v√†o $folder (original)")
            } else {
                // Target language - c·∫ßn d·ªãch
                var processedInLang = 0
                for ((batchIndex, batch) in batches.withIndex()) {
                    onProgress("üåç D·ªãch batch ${batchIndex + 1}/${batches.size} sang $lang (${batch.size} strings)...")
                    
                    // Translate entire batch at once - KH√îNG catch exception
                    val translatedBatch = translateStrings(
                        batch,
                        "en",
                        lang
                    ) { progress ->
                        onProgress("   $lang batch ${batchIndex + 1}: $progress")
                    }
                    
                    // Add translated strings to XML
                    for ((originalPair, translatedPair) in batch.zip(translatedBatch)) {
                        val stringName = originalPair.first
                        val translatedText = translatedPair.second
                        
                        val xmlFile = File(module.resDir, "$folder/strings.xml")
                        xmlFile.parentFile.mkdirs()
                        xmlProcessor.addOrUpdateStringInXml(xmlFile, stringName, translatedText)
                        processedInLang++
                    }
                    
                    onProgress("‚úÖ ƒê√£ th√™m batch ${batchIndex + 1} v√†o $folder ($processedInLang/$totalStrings strings)")
                    
                    // Add delay between batches to respect API limits
                    if (batchIndex < batches.size - 1) {
                        Thread.sleep(2000)
                    }
                }
                onProgress("üéâ Ho√†n th√†nh t·∫•t c·∫£ batches cho $folder ($processedInLang strings)")
            }
            
            // Add delay between languages
            Thread.sleep(1000)
        }
        
        onProgress("üéâ T·∫•t c·∫£ $totalStrings strings ƒë√£ ƒë∆∞·ª£c th√™m v√†o module ${module.name}!")
    }
}
